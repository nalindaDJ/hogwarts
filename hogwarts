#!/bin/bash
################################################################################
# Script Name: mysql_script_executor.sh
# Description: This script executes a MySQL script for each database listed in
#              a specified file and logs the output.
# Author: Damith Jayasinghe
# Version: 1.3
################################################################################

# Echo author details at the beginning of script execution
echo "##########################################################################"
echo "#                          Script by:                                    #"
echo "#              ████████ Damith Jayasinghe ████████                       #"
echo "##########################################################################"

# Function to print usage
usage() {
    echo "Usage: $0 -d <database_list_file> -s <mysql_script_file> [-i <ignore_databases>]"
    echo "  -d  Database list file"
    echo "  -s  MySQL script file"
    echo "  -i  (Optional) Comma-separated list of databases to ignore"
    exit 1
}

# Parse options
while getopts ":d:s:i:" opt; do
    case $opt in
        d) database_list_file="$OPTARG" ;;
        s) mysql_script_file="$OPTARG" ;;
        i) ignore_databases="$OPTARG" ;;
        *) usage ;;
    esac
done

# Check if mandatory parameters are provided
if [ -z "$database_list_file" ] || [ -z "$mysql_script_file" ]; then
    usage
fi

# Create a log file with a name based on the MySQL script file
log_file="${mysql_script_file%.*}_log.txt"

# MySQL credentials
MYSQL_USER="root"
MYSQL_PASSWORD="password"

# Check if the database list file exists
if [ ! -f "$database_list_file" ]; then
    echo "Database list file $database_list_file not found."
    exit 1
fi

# Check if the MySQL script file exists
if [ ! -f "$mysql_script_file" ]; then
    echo "MySQL script file $mysql_script_file not found."
    exit 1
fi

# Convert the ignore_databases string to an array
IFS=',' read -r -a ignore_array <<< "$ignore_databases"

# Function to log messages
log_message() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$log_file"
}

# Function to print messages to both terminal and log file
print_and_log_message() {
    message="$1"
    echo "$message"
    log_message "$message"
}

# Create archive folder if it doesn't exist
archive_folder="archive"
if [ ! -d "$archive_folder" ]; then
    mkdir "$archive_folder"
fi

# Loop through each database in the list and execute the MySQL script
while IFS= read -r database_name; do
    if [[ " ${ignore_array[@]} " =~ " ${database_name} " ]]; then
        print_and_log_message "Skipping database $database_name as it is set to be ignored."
        continue
    fi

    print_and_log_message "Executing MySQL script $mysql_script_file for database $database_name..."

    # Execute the MySQL script for the current database and log the output
    mysql --user=$MYSQL_USER -p$MYSQL_PASSWORD -hlocalhost $database_name < $mysql_script_file >> "$log_file" 2>&1

    # Check if the MySQL script execution was successful
    if [ $? -eq 0 ]; then
        print_and_log_message "MySQL script executed successfully for database $database_name."
    else
        print_and_log_message "Error executing MySQL script for database $database_name."
    fi

done < "$database_list_file"

# Move MySQL script file and log file to archive folder
mv "$mysql_script_file" "$archive_folder/"
mv "$log_file" "$archive_folder/"

echo "Execution completed. Please check $archive_folder for archived MySQL script and log file."
