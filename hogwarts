#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <database_list_file> <mysql_script_file>"
    exit 1
fi

# Assign the arguments to variables
database_list_file=$1
mysql_script_file=$2
log_file="mysql_script_log.txt"
MYSQL_USER="root"
MYSQL_PASSWORD="password"

# Check if the database list file exists
if [ ! -f "$database_list_file" ]; then
    echo "Database list file $database_list_file not found."
    exit 1
fi

# Check if the MySQL script file exists
if [ ! -f "$mysql_script_file" ]; then
    echo "MySQL script file $mysql_script_file not found."
    exit 1
fi

# Function to log messages
log_message() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$log_file"
}

# Function to print messages to both terminal and log file
print_and_log_message() {
    message="$1"
    echo "$message"
    log_message "$message"
}

# Loop through each database in the list and execute the MySQL script
while IFS= read -r database_name; do
    print_and_log_message  "Executing MySQL script $mysql_script_file for database $database_name..."

    # Execute the MySQL script for the current database and log the output
    mysql --user=$MYSQL_USER -p$MYSQL_PASSWORD -hlocalhost $database_name < $mysql_script_file >> "$log_file" 2>&1

    # Check if the MySQL script execution was successful
    if [ $? -eq 0 ]; then
        print_and_log_message  "MySQL script executed successfully for database $database_name."
    else
        print_and_log_message  "Error executing MySQL script for database $database_name."
    fi

done < "$database_list_file"

echo "Execution completed. Please check $log_file for details."
